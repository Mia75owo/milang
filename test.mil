fn putchar(char: i32) -> (i32);
fn puts(str: i64) -> (i32);
fn printf(str: i64, arg: i64) -> (i32);
fn getchar() -> (i32);
fn exit(code: i32) -> (i32);

putchar(foo())
putchar('\n')

fn foo() -> (i8) {
  fn baa() -> (i8) {
    fn baz() -> (i8) {
      return 'O'
    }
    return baz()
  }
  return baa()
}

fn say_hi() {
  putchar('H')
  putchar('i')
  putchar('i')
  putchar('i')
  putchar('\n')

  return;
}

say_hi()

fn say_hi_str() {
  puts("Hiii :>")
  puts("How are you?")
  puts("Look at this cool escaped stuff: \" \\ \n \r \"")
  return;
}

say_hi_str()

user_input: i8 = 0
if (0) {
  user_input = getchar()
}

if user_input == 'y' {
  puts("Yes :>")
} else {
  puts("No :<")
}

hi: [i8] = @i8['h', 'i', '!']
i: i64 = 0
while (i < 3) {
  putchar(hi[i])
  i = i + 1
}
putchar('\n')

hi[0] = 'H'
hi[1] = 'e'
hi[2] = 'y'

i = 0
while (i < 3) {
  putchar(hi[i])
  i = i + 1
}
putchar('\n')

// cool comment :D
/*
  cool MULTILINE comment :D
*/

if (1 == 1 && 2 == 2) {
  putchar('y')
} else {
  putchar('n')
}

putchar('\n')

test_var: [i8] = @i8['a']
fn test(var: i64) {
  putchar(var[0])
  return;
}
test(test_var)

putchar('\n')

return 0
